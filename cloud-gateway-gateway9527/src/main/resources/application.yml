server:
  port: 9527

spring:
  application:
    name: cloud-gateway
  redis:
    host: 192.168.190.134
    port: 6379
    database: 0
  cloud:
    sentinel:
      filter:
        enabled: false # false 表示不开启 URL 粒度的限流功能
      transport:
        dashboard: 192.168.190.134:8080 # TODO: 配置 Sentinel 控制台地址及端口号
        port: 8719 # Sentinel 控制台和客户端通信的端口号，不配置的话默认是 8719，如果被占用了会自动往上加 1 找一个未被占用的端口
        client-ip: 192.168.1.137 # TODO: 配置 Sentinel 客户端 IP（也就是本机 IP），不配置可能会识别成 Sentinel 控制台所在的 IP，导致错误
    gateway:
      default-filters: # 默认过滤器
        - SetRequestHeader=X-Request-Red, Blue # 设置请求头
      routes:
        # http://localhost:9527/payment/lb?open=false
        - id: payment_routh # 路由的id，没有固定规则但要求唯一，建议配合服务名
          uri: http://localhost:8001 # 目标服务地址
          predicates:
            - Path=/payment/lb # 路径相匹配的断言条件
            - Query=open,false # 参数相匹配的断言条件，参数名为open，值为false

        # http://localhost:9527/payment/lb
        - id: payment_routh2
          uri: lb://CLOUD-PAYMENT-SERVICE # lb://服务注册中心的微服务名称，这种方式开启负载均衡
          predicates:
            - Path=/payment/lb # 路径相匹配的断言条件
            - Cookie=name,[a-z]+
            - Cookie=value,[a-z]+
            - Header=GatewayNeed, \d+
            - Host=localhost:9527
            - Method=GET
            - Query=id,.+ # 匹配任意请求参数
          filters:
            - SetStatus=401 # 设置响应状态码
            - MyPartialFilter # 自定义过滤器：只有当请求中携带了 user-id 头部信息时，才能访问

        # http://localhost:9527/payment/timeout?timeout=true
        - id: payment_routh3
          uri: lb://CLOUD-PAYMENT-SERVICE
          predicates:
            - Path=/payment/**
            - Query=timeout,true
          filters:
            - name: Hystrix # 开启熔断
              args:
                name: fallbackcmd # 熔断后执行的命令
                fallbackUri: forward:/payment/fallback # 熔断后转发到的地址，必须能匹配 Path 断言

        # http://localhost:9527/payment/timeout?rateLimiter=true
        - id: payment_routh4
          uri: lb://CLOUD-PAYMENT-SERVICE
          predicates:
            - Path=/payment/get/**
            - Query=rateLimiter,true
          filters:
            - name: RequestRateLimiter # 进行服务限流
              args:
                redis-rate-limiter.replenishRate: 1 # 令牌每秒填充数量
                redis-rate-limiter.burstCapacity: 3 # 令牌桶总容量
                key-resolver: "#{@pathKeyResolver}" # 自定义的 MyPathKeyResolver 的 Bean 名称

hystrix:
  command:
    fallbackcmd: # 熔断后执行的命令
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 2000 #服务超时时间

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka

